#!/usr/bin/perl

use v5.12;
use warnings;

use List::Util qw'first sum';

=head1 NAME

rucksack - elves have rucksacks and stuff

=head1 FUNCTIONS

=over

=item rucksack($string)

Retrn two arrays of items representing the two compartments of a
standard-issue ELF RUCKSACK decoded from $string, where each character is
[A-Za-z] representing the item type and the compartments are even size.

=cut

sub rucksack {
    local $_;
    my $packed = shift;
    my $middle = length($packed) / 2;
    [
     map
     { [ split(//, $_) ] }
     substr($packed, 0, $middle), substr($packed, $middle)
    ]
}

=item priority($type)

Return the priority of an item type.

=cut

sub priority {
    local $_ = shift;
    if (/[a-z]/) {
        return (ord) - 96
    }
    if (/[A-Z]/) {
        return (ord) - 38
    }
}

=item elves_come_in_threes(@rucksacks)

Return array of elf groups where each group is an array of three rucksacks.
Because elves come in threes.

=cut

sub elves_come_in_threes {
    my @threes;
    while (my $elf = shift) {
        push(@threes, [$elf, shift(), shift()]);
    }
    \@threes
}

=item badge

Return the badge for this three-elf group of rucksacks, which is the item type
contained in all three rucksacks.

=cut

sub badge {
    my $group = shift;
    my %types;
    for my $rucksack (@$group) {
        my %sack_set;
        for my $part (@$rucksack) {
            for my $item (@$part) {
                if (!$sack_set{$item}++) {
                    $types{$item}++;
                    $types{$item} == 3 && return $item
                }
            }
        }
    }
}

=item first_misclassified_type($rucksack)

Return the first type that appears in both comparments of a rucksack.

=cut

sub first_misclassified_type {
    local $_;
    my ($part1, $part2) = @{shift()};
    # TODO What!  I got lucky?!  I didn't implement the rule about types being case-insensitive...
    my %part1_types = map { $_, 1 } @$part1;
    first { $part1_types{$_} } @$part2
}

=back

=cut

sub main {
    local $_;

    my @rucksacks = map { chomp; rucksack($_) } <>;
    say sum(map { priority(first_misclassified_type($_)) } @rucksacks);
    say sum(map { priority(badge($_)) } @{elves_come_in_threes(@rucksacks)});
    0
}

if (!caller) {
    exit(main(@ARGV))
}

1;
